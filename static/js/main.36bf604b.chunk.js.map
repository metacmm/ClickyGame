{"version":3,"sources":["components/Nav/index.js","components/Title/index.js","components/Footer/index.js","components/CardGroup/index.js","components/CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","style","backgroundColor","score","topScore","guessed","Title","Footer","href","CardList","children","CardItem","onClick","handleClickImage","src","image","CardContainer","state","animals","clickedItem","event","element","target","console","log","includes","setState","clicketItemCopy","push","Math","max","shuffleArray","arrList","i","length","rndIdx","floor","random","temp","this","map","item","key","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"06CAeeA,MAZf,SAAaC,GACT,OACI,yBAAKC,UAAU,uCAAuCC,MAAO,CAAEC,gBAAiB,YAC5E,2CACA,yBAAKF,UAAU,uBACX,qCAAWD,EAAMI,MAAjB,iBAAsCJ,EAAMK,UAC5C,uBAAGJ,UAAWD,EAAMM,QAAU,YAAc,aAA5C,eAAsEN,EAAMM,QAAU,aAAe,mB,MCGtGC,MATf,WACI,OACI,yBAAKN,UAAU,6BACX,gEACA,mECQGO,MAbf,WACI,OACI,4BAAQP,UAAU,aACd,yBAAKA,UAAU,sBAAsBC,MAAO,CAACC,gBAAgB,YACzD,yBAAKF,UAAU,WACX,uBAAGA,UAAU,eAAeQ,KAAK,yCAAjC,WAEJ,+B,MCNT,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SACvB,OACI,yBAAKV,UAAU,gBAAgBU,GAIhC,SAASC,EAASZ,GACrB,OACI,yBACIa,QAASb,EAAMc,iBACfb,UAAWD,EAAMM,QAAS,2BAA6B,iCACvDS,IAAKf,EAAMgB,Q,WC+DRC,E,2MArEXC,MAAQ,CACJC,QAASA,EACTf,MAAO,EACPC,SAAU,EACVe,YAAa,GACbd,SAAS,G,EAIbQ,iBAAmB,SAACO,GAChB,IAAMC,EAAUD,EAAME,OAGtB,GAFAC,QAAQC,IAAIJ,EAAME,QAEb,EAAKL,MAAME,YAAYM,SAASJ,GAWjC,EAAKK,SAAS,CACVvB,MAAO,EACPgB,YAAa,GACbd,SAAS,QAd8B,CAC3C,IAAIsB,EAAkB,EAAKV,MAAME,YACjCQ,EAAgBC,KAAKP,GACrB,EAAKK,SAAS,CACVvB,MAAO,EAAKc,MAAMd,MAAQ,EAC1BC,SAAUyB,KAAKC,IAAI,EAAKb,MAAMb,SAAU,EAAKa,MAAMd,MAAQ,GAC3DgB,YAAaQ,EACbtB,SAAS,IAWjB,EAAK0B,aAAa,EAAKd,MAAMC,U,EAGjCa,aAAe,SAACC,GACZ,IAAK,IAAIC,EAAID,EAAQE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAASN,KAAKO,MAAMP,KAAKQ,UAAYJ,EAAI,IACzCK,EAAON,EAAQC,GACnBD,EAAQC,GAAKD,EAAQG,GACrBH,EAAQG,GAAUG,EAEtBf,QAAQC,IAAIQ,I,wEAGN,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CACI7B,MAAOoC,KAAKtB,MAAMd,MAClBC,SAAUmC,KAAKtB,MAAMb,SACrBC,QAASkC,KAAKtB,MAAMZ,UAExB,kBAAC,EAAD,MACA,kBAACI,EAAD,KACK8B,KAAKtB,MAAMC,QAAQsB,KAAI,SAAAC,GAAI,OACxB,kBAAC9B,EAAD,CACI+B,IAAKD,EAAKE,GACV9B,iBAAkB,EAAKA,iBACvBE,MAAO0B,EAAK1B,MACZV,QAAS,EAAKY,MAAMZ,cAIhC,kBAAC,EAAD,W,GAhEYuC,aCEbC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.36bf604b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n    return (\n        <nav className=\"navbar navbar-light fixed-top navtop\" style={{ backgroundColor: \"#e3f2fd\" }}>\n            <h1>Clicky Game</h1>\n            <div className=\"justify-content-end\">\n                <p>Score: {props.score} | Top Score: {props.topScore}</p>\n                <p className={props.guessed ? \"textright\" : \"textwrong\"}>You guessed {props.guessed ? \"correctly!\" : \"incorrectly!\"}</p>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(){\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <h4>Click on an image to earn points</h4>\n            <h4>Don't click the same image twice!</h4>\n        </div>\n    )\n}\n\nexport default Title;","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <footer className=\"bd-footer\">\n            <div className=\"container-fluid p-3\" style={{backgroundColor:\"#e5d6b0\"}}>\n                <nav className=\"navbar \">\n                    <a className=\"navbar-brand\" href=\"https://github.com/metacmm/ClickyGame\">GitHub</a>\n                </nav>\n                <p></p>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nexport function CardList({ children }) {\n    return (\n        <div className=\"container-md\">{children}</div>\n    );\n}\n\nexport function CardItem(props) {\n    return (\n        <img\n            onClick={props.handleClickImage}\n            className={props.guessed? \"img-thumbnail card-image\" : \"img-thumbnail card-image shake\"} \n            src={props.image}\n        />\n    );\n}","import React, { Component } from \"react\";\nimport Nav from \"./Nav\";\nimport Title from \"./Title\";\nimport Footer from \"./Footer\";\nimport { CardList, CardItem } from \"./CardGroup\";\nimport animals from '../animals.json';\n\nclass CardContainer extends Component {\n    state = {\n        animals: animals,\n        score: 0,\n        topScore: 0,\n        clickedItem: [],\n        guessed: true\n    };\n\n\n    handleClickImage = (event) => {\n        const element = event.target;\n        console.log(event.target);\n\n        if (!this.state.clickedItem.includes(element)) {\n            let clicketItemCopy = this.state.clickedItem;\n            clicketItemCopy.push(element);\n            this.setState({\n                score: this.state.score + 1,\n                topScore: Math.max(this.state.topScore, this.state.score + 1),\n                clickedItem: clicketItemCopy,\n                guessed: true\n            });\n\n        } else {\n            this.setState({\n                score: 0,\n                clickedItem: [],\n                guessed: false\n            });\n        }\n\n        this.shuffleArray(this.state.animals);\n    }\n\n    shuffleArray = (arrList) => {\n        for (let i = arrList.length - 1; i > 0; i--) {\n            let rndIdx = Math.floor(Math.random() * (i - 1));\n            let temp = arrList[i];\n            arrList[i] = arrList[rndIdx];\n            arrList[rndIdx] = temp;\n        }\n        console.log(arrList);\n    }\n\n    render() {\n        return (\n            <div>\n                <Nav\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                    guessed={this.state.guessed}\n                />\n                <Title />\n                <CardList>\n                    {this.state.animals.map(item =>\n                        <CardItem\n                            key={item.id}\n                            handleClickImage={this.handleClickImage}\n                            image={item.image}\n                            guessed={this.state.guessed}\n                        />\n                    )}\n                </CardList>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default CardContainer;","import React from 'react';\nimport CardContainer from \"./components/CardContainer\";\n\nfunction App() {\n  return (\n    <CardContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}